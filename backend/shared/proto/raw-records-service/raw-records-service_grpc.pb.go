// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raw_records_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RawRecordsServiceClient is the client API for RawRecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RawRecordsServiceClient interface {
	FetchByRequestId(ctx context.Context, in *FetchByRequestIdRequest, opts ...grpc.CallOption) (*FetchByRequestIdResponse, error)
	StoreTransactions(ctx context.Context, in *StoreTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rawRecordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRawRecordsServiceClient(cc grpc.ClientConnInterface) RawRecordsServiceClient {
	return &rawRecordsServiceClient{cc}
}

func (c *rawRecordsServiceClient) FetchByRequestId(ctx context.Context, in *FetchByRequestIdRequest, opts ...grpc.CallOption) (*FetchByRequestIdResponse, error) {
	out := new(FetchByRequestIdResponse)
	err := c.cc.Invoke(ctx, "/transactions.RawRecordsService/FetchByRequestId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawRecordsServiceClient) StoreTransactions(ctx context.Context, in *StoreTransactionsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/transactions.RawRecordsService/StoreTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawRecordsServiceServer is the server API for RawRecordsService service.
// All implementations must embed UnimplementedRawRecordsServiceServer
// for forward compatibility
type RawRecordsServiceServer interface {
	FetchByRequestId(context.Context, *FetchByRequestIdRequest) (*FetchByRequestIdResponse, error)
	StoreTransactions(context.Context, *StoreTransactionsRequest) (*empty.Empty, error)
	mustEmbedUnimplementedRawRecordsServiceServer()
}

// UnimplementedRawRecordsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRawRecordsServiceServer struct {
}

func (UnimplementedRawRecordsServiceServer) FetchByRequestId(context.Context, *FetchByRequestIdRequest) (*FetchByRequestIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByRequestId not implemented")
}
func (UnimplementedRawRecordsServiceServer) StoreTransactions(context.Context, *StoreTransactionsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreTransactions not implemented")
}
func (UnimplementedRawRecordsServiceServer) mustEmbedUnimplementedRawRecordsServiceServer() {}

// UnsafeRawRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RawRecordsServiceServer will
// result in compilation errors.
type UnsafeRawRecordsServiceServer interface {
	mustEmbedUnimplementedRawRecordsServiceServer()
}

func RegisterRawRecordsServiceServer(s *grpc.Server, srv RawRecordsServiceServer) {
	s.RegisterService(&_RawRecordsService_serviceDesc, srv)
}

func _RawRecordsService_FetchByRequestId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchByRequestIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawRecordsServiceServer).FetchByRequestId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.RawRecordsService/FetchByRequestId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawRecordsServiceServer).FetchByRequestId(ctx, req.(*FetchByRequestIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawRecordsService_StoreTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawRecordsServiceServer).StoreTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.RawRecordsService/StoreTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawRecordsServiceServer).StoreTransactions(ctx, req.(*StoreTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawRecordsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.RawRecordsService",
	HandlerType: (*RawRecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchByRequestId",
			Handler:    _RawRecordsService_FetchByRequestId_Handler,
		},
		{
			MethodName: "StoreTransactions",
			Handler:    _RawRecordsService_StoreTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raw-records-service/raw-records-service.proto",
}
