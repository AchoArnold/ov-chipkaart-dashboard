// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactions_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransactionsServiceClient is the client API for TransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsServiceClient interface {
	FetchByCredentials(ctx context.Context, in *FetchByCredentialsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	FetchFromBytes(ctx context.Context, in *FetchFromBytesRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
}

type transactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsServiceClient(cc grpc.ClientConnInterface) TransactionsServiceClient {
	return &transactionsServiceClient{cc}
}

func (c *transactionsServiceClient) FetchByCredentials(ctx context.Context, in *FetchByCredentialsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionsService/FetchByCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) FetchFromBytes(ctx context.Context, in *FetchFromBytesRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionsService/FetchFromBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServiceServer is the server API for TransactionsService service.
// All implementations must embed UnimplementedTransactionsServiceServer
// for forward compatibility
type TransactionsServiceServer interface {
	FetchByCredentials(context.Context, *FetchByCredentialsRequest) (*TransactionsResponse, error)
	FetchFromBytes(context.Context, *FetchFromBytesRequest) (*TransactionsResponse, error)
	mustEmbedUnimplementedTransactionsServiceServer()
}

// UnimplementedTransactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionsServiceServer struct {
}

func (UnimplementedTransactionsServiceServer) FetchByCredentials(context.Context, *FetchByCredentialsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchByCredentials not implemented")
}
func (UnimplementedTransactionsServiceServer) FetchFromBytes(context.Context, *FetchFromBytesRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFromBytes not implemented")
}
func (UnimplementedTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {}

// UnsafeTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServiceServer will
// result in compilation errors.
type UnsafeTransactionsServiceServer interface {
	mustEmbedUnimplementedTransactionsServiceServer()
}

func RegisterTransactionsServiceServer(s *grpc.Server, srv TransactionsServiceServer) {
	s.RegisterService(&_TransactionsService_serviceDesc, srv)
}

func _TransactionsService_FetchByCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchByCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).FetchByCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionsService/FetchByCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).FetchByCredentials(ctx, req.(*FetchByCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_FetchFromBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFromBytesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).FetchFromBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionsService/FetchFromBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).FetchFromBytes(ctx, req.(*FetchFromBytesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.TransactionsService",
	HandlerType: (*TransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchByCredentials",
			Handler:    _TransactionsService_FetchByCredentials_Handler,
		},
		{
			MethodName: "FetchFromBytes",
			Handler:    _TransactionsService_FetchFromBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions_service.proto",
}
