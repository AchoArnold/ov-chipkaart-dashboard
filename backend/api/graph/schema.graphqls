# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"The `UploadFile, // b.txt` scalar type represents a multipart file upload."
scalar Upload

type User {
  id: ID!
  firstName:String!
  lastName:String!
  email:String!
  createdAt: String!
  updatedAt: String!
}

type Token {
  value: String!
}

input CreateUserInput {
  firstName:String!
  lastName:String!
  email:String!
  password: String!
  reCaptcha: String!
}

type AuthOutput {
  user: User!
  token: Token!
}

type AnalyzeRequest {
  startDate: String!
  endDate: String!
  ovChipkaartNumber: String!
  id: String!
  status: String!
  createdAt: String!
  updatedAt: String!
}

type AnalzyeRequestDetails {
  analyzeRequestId: String!
}

input RefreshTokenInput{
  token: String!
}

input LoginInput {
  email: String!
  password: String!
  rememberMe: Boolean!
  reCaptcha: String!
}

input StoreAnalyzeRequestInput {
  ovChipkaartUsername: String
  ovChipkaartPassword: String
  travelHistoryFile: Upload
  startDate: String!
  endDate: String!
  ovChipkaartNumber: String!
}

"The `Query` type, represents all of the entry points into our object graph."
type Query {
  user: User!
  analyzeRequests(skip: Int, take: Int, orderBy: String, orderDirection: String): [AnalyzeRequest!]!
}

"The `Mutation` type, represents all updates we can make to our data."
type Mutation {
  createUser(input: CreateUserInput!): AuthOutput!
  login(input: LoginInput!): AuthOutput!
  cancelToken: Boolean!
  refreshToken(input: RefreshTokenInput!): String!
  storeAnalyzeRequest(input: StoreAnalyzeRequestInput!): Boolean!
}